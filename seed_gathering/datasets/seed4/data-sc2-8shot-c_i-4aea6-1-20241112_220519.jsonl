{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: heuristic-based search, heuristic functions, return values, input validation\n\n### Task", "fingerprint": null, "seed": "def _mine_heuristic(bot, problem):\n    \"\"\"Return the mining heuristic.\n\n    bot is an _ImaginaryBot.\n    \"\"\"\n    if bot.contains(problem.get_block_id()):\n        return 0\n\n    bot_pos = bot.get_pos()\n    dest_pos = problem.get_block_loc()\n\n    # If man == dy: return man + 1\n    # If man > dy: return man\n    # If man < dy: return dy?\n    man_dist = _manhattan((bot_pos.x, bot_pos.z), (dest_pos.x, dest_pos.z))\n    y_diff = bot_pos.y - dest_pos.y\n    if y_diff < 0:\n        y_diff += 1\n\n    if y_diff == 0:\n        return man_dist\n\n    # Transform so that it's only dropping\n    drop = _DROP if y_diff > 0 else 1\n    y_diff = abs(y_diff)\n\n    drops = _drops(y_diff, drop)\n\n    if man_dist > drops:\n        return man_dist\n    if man_dist == drops:\n        return man_dist + 1\n    if drop == 1:\n        return drops\n    if y_diff % drop == 1:\n        return drops\n    return drops + 1", "id": 2, "concepts": ["heuristic-based search", "heuristic functions", "return values", "input validation"], "instruction": "Design a Python function that takes a `start` and `finish` values and returns a list of lists, where each inner list represents a possible combination of values and operators to be used in an arithmetic expression that evaluates to the `goal` value. The function should return `False` if there is not a possible combination that evaluates to the `goal` value."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 3\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 5\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: validation helper function, validation function implementation, input validation, type checking\n\n### Task", "fingerprint": null, "seed": "def _validate_shuffle_split_init(test_size, train_size):\n    \"\"\"Validation helper to check the test_size and train_size at init\"\"\"\n    if test_size is None and train_size is None:\n        raise ValueError('test_size and train_size can not both be None')\n\n    if test_size is not None:\n        if np.asarray(test_size).dtype.kind == 'f':\n            if test_size >= 1.:\n                raise ValueError(\n                    'test_size=%f should be smaller '\n                    'than 1.0 or be an integer' % test_size)\n        elif np.asarray(test_size).dtype.kind != 'i':\n            raise ValueError('Invalid value for test_size: %r' % test_size)\n\n    if train_size is not None:\n        if np.asarray(train_size).dtype.kind == 'f':\n            if train_size >= 1.:\n                raise ValueError(\n                    'train_size=%f should be smaller '\n                    'than 1.0 or be an integer' % test_size)\n            elif (np.asarray(test_size).dtype.kind == 'f' and\n                    (train_size + test_size) > 1.):\n                raise ValueError('The sum of test_size and train_size = %f'\n                                 'should be smaller than 1.0. Reduce test_size '\n                                 'and/or train_size.' % (train_size + test_size))\n        elif np.asarray(train_size).dtype.kind != 'i':\n            raise ValueError('Invalid value for train_size: %r' % train_size)", "id": 3, "concepts": ["validation helper function", "validation function implementation", "input validation", "type checking"], "instruction": "Create a Python function `validate_inputs(inputs, types)` that takes a list of inputs and corresponding data types as function parameters and validates the provided inputs to ensure they match the specified types. The function should return True if all inputs are of the specified types and False otherwise. Utilize a helper function to validate the types of each input, and compare it with the provided data type. Additionally, validate the inputs against correctness of types and prevent possible errors in the data."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: input validation with exceptions, function signature, type hints, type checking\n\n### Task", "fingerprint": null, "seed": "def check_cv(cv=3):\n    \"\"\"Checks the ``cv`` parameter to determine\n    whether it's a valid int or H2OBaseCrossValidator.\n\n    Parameters\n    ----------\n\n    cv : int or H2OBaseCrossValidator, optional (default=3)\n        The number of folds or the H2OBaseCrossValidator\n        instance.\n\n    Returns\n    -------\n\n    cv : H2OBaseCrossValidator\n        The instance of H2OBaseCrossValidator\n    \"\"\"\n    if cv is None:\n        cv = 3\n\n    if isinstance(cv, numbers.Integral):\n        return H2OKFold(cv)\n\n    if not isinstance(cv, H2OBaseCrossValidator):\n        raise ValueError('expected int or instance of '\n                         'H2OBaseCrossValidator but got %s'\n                         % type(cv))\n\n    return cv", "id": 4, "concepts": ["input validation with exceptions", "function signature", "type hints", "type checking"], "instruction": "Create a Python class named `MyClass` that takes a numeric input and stores it as an instance variable. The class should have a method that takes a different numeric input and adds it to the stored one. The class should also have a method that returns the sum of the stored input and the input passed to the method."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: conversion from Minecraft vector to 3D coordinates, access to player's location\n\n### Task", "fingerprint": null, "seed": "def _player_loc():\n    \"\"\"Return the player's location.\"\"\"\n    return _to_my_vec3(_get_mc().player.getTilePos())", "id": 5, "concepts": ["conversion from Minecraft vector to 3D coordinates", "access to player's location"], "instruction": "Write a Python function `get_player_location` that returns a tuple containing the x, y, z coordinates of the player's location in Minecraft. The function should use a 3D vector to represent the player's coordinates. The function should consider the following exceptions:\n- if the player is not connected\n- if the player is not online\n- if the player's location is available"}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: sql database creation, sqlite engine creation, dataframe to sql table load\n\n### Task", "fingerprint": null, "seed": "def save_data(dataframe, database_filename):\n    \"\"\"\n   Take the input dataframe and save it into sqlite database\n    \"\"\"\n    # Creating sqlite engine and save the dataframe with the name message\n    engine_process = create_engine('sqlite:///Messages.db')\n    dataframe.to_sql('messaging', engine_process, index=False,if_exists='replace')", "id": 6, "concepts": ["sql database creation", "sqlite engine creation", "dataframe to sql table load"], "instruction": "Write a Python program that creates a database with a single table called `users` in a SQLite engine. The database should contain the following columns:\n\n- `id` - an integer representing the user's unique identifier\n- `username` - a string representing the user's username\n- `password` - a string representing the user's password\n- `created_at` - a datetime object representing the time when the user account was created\n\nThe program should get the necessary user information from a user-friendly input. Once the user data is collected, load it into the database table as `namedtuple` objects."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: conversion from other types to _Vec3\n\n### Task", "fingerprint": null, "seed": "def _to_my_vec3(vec):\n    \"\"\"Return the _Vec3 alternative of the Vec3.\"\"\"\n    return _Vec3(vec.x, vec.y, vec.z)", "id": 7, "concepts": ["conversion from other types to _Vec3"], "instruction": "Implement a Python class named `Vec3` for representing 3D vectors. The class should support addition, subtraction, and multiplication by a scalar."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over adjacent directions, vector addition\n\n### Task", "fingerprint": null, "seed": "def _all_dirs():\n    \"\"\"Return all adjacent directions.\"\"\"\n    return _adj_dirs() + [_Vec3(0, 1, 0), _Vec3(0, -1, 0)]", "id": 8, "concepts": ["iterating over adjacent directions", "vector addition"], "instruction": "Write a Python program that takes a 3D vector `v` and a list of 3D vectors `vectors` and returns the vector of maximum length and the indices of the vectors that form the maximum length."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 4\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: random character generation with random.choice(), string concatenation with join(), list comprehension, iteration\n\n### Task", "fingerprint": null, "seed": "def string_id(length=8):\n    \"\"\" Generate Random ID.\n\n    Random ID contains ascii letters and digitis.\n\n    Args:\n        length (int): Character length of id.\n\n    Returns:\n        Random id string.\n    \"\"\"\n    return ''.join(random.choice(string.ascii_letters +\n                                 string.digits)\n                   for _ in range(length))", "id": 9, "concepts": ["random character generation with random.choice()", "string concatenation with join()", "list comprehension", "iteration"], "instruction": "Implement a Python class `PasswordGenerator` that generates random passwords using a dictionary of words. The class should support generating passwords of a specified length, with each word selected at random from the dictionary. The following is an example usage scenario:\n\n```python\n# Create a new password generator object\ngenerator = PasswordGenerator(word_list=word_list)\n\n# Generate a password of length 10\npassword = generator.generate_password(length=10)\n\n# Print the generated password\nprint(password)\n```"}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 4\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object instantiation, data retrieval, class instantiation\n\n### Task", "fingerprint": null, "seed": "def _get_mc():\n    \"\"\"Return the Minecraft instance.\"\"\"\n    return minecraft.Minecraft.create()", "id": 10, "concepts": ["object instantiation", "data retrieval", "class instantiation"], "instruction": "Write a Python function called `get_data` that takes an input path as an argument. The function should return a dictionary of all the data stored in the JSON file at the given path. The dictionary should have the following keys:\n- `name`: string, the name of the superhero\n- `real_name`: string, the real name of the superhero\n- `powers`: list of strings, the powers the superhero possesses\n- `teams`: list of strings, the teams the superhero is part of\n\nIf the file does not exist, the function should return an empty dictionary. If the input path is not a file, the function should raise a `TypeError` exception of type `OSError`."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: exception handling techniques, flow control techniques, 2D list traversal\n\n### Task", "fingerprint": null, "seed": "def matrix_divided(matrix, div):\n    \"\"\"Divides a Matrix\n\n    Args:\n    matrix: A list of lists of ints or floats\n    div: a non zero int or float\n\n    Exceptions:\n    TypeError: if the matrix and/or div is not as stated or the matrix elements\n               are not of the same size\n    ZeroDivisionError: if div is zero\n\n    Returns: a new matrix holding the results\n\n    \"\"\"\n    workmat = []\n    WrongType = False\n    TooLong = False\n    i = 0\n    if isinstance(matrix, list):\n        if matrix == []:\n            WrongType = True\n        for x in range(len(matrix)):\n            if isinstance(matrix[x], list):\n                workmat.append([])\n                for y in range(len(matrix[x])):\n                    if matrix[x] == []:\n                        WrongType = True\n                    if (\n                            isinstance(matrix[x][y], int) or\n                            isinstance(matrix[x][y], int)\n                    ):\n                        workmat[x].append(matrix[x][y])\n                    else:\n                        WrongType = True\n                    if x == 0 and y == 0:\n                        i = len(matrix[x])\n                    else:\n                        if not i == len(matrix[x]):\n                            TooLong = True\n            else:\n                WrongType = True\n    else:\n        WrongType = True\n    if WrongType:\n        raise TypeError(\n            \"matrix must be a matrix (list of lists) of integers/floats\")\n    if TooLong:\n        raise TypeError(\n            \"Each row of the matrix must have the same size\")\n    if not isinstance(div, float) and not isinstance(div, int):\n        raise TypeError(\n            \"div must be a number\")\n    if div == 0:\n        raise ZeroDivisionError(\n            \"division by zero\")\n\n    for x in range(len(workmat)):\n        for y in range(len(workmat[x])):\n            workmat[x][y] = round((workmat[x][y] / div), 2)\n    return workmat", "id": 11, "concepts": ["exception handling techniques", "flow control techniques", "2D list traversal"], "instruction": "Write a Python class to implement a clock. The class should have a method `tick()` that advances the clock by a single tick. The clock should have a 24 hour format and support each tick being 1 second, 1 minute, 1 hour, 1 day, or 1 week. The class should have a method `format()` to output the current time in the format \"HH:MM:SS\" (24 hour format). The class should also have a method `add(seconds)` to advance the clock by a specified number of seconds."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: random sampling, data partitioning, conditional branching\n\n### Task", "fingerprint": null, "seed": "def h2o_train_test_split(frame, test_size=None, train_size=None, random_state=None, stratify=None):\n    \"\"\"Splits an H2OFrame into random train and test subsets\n\n    Parameters\n    ----------\n\n    frame : H2OFrame\n        The h2o frame to split\n\n    test_size : float, int, or None (default=None)\n        If float, should be between 0.0 and 1.0 and represent the\n        proportion of the dataset to include in the test split. If\n        int, represents the absolute number of test samples. If None,\n        the value is automatically set to the complement of the train size.\n        If train size is also None, test size is set to 0.25\n\n    train_size : float, int, or None (default=None)\n        If float, should be between 0.0 and 1.0 and represent the\n        proportion of the dataset to include in the train split. If\n        int, represents the absolute number of train samples. If None,\n        the value is automatically set to the complement of the test size.\n\n    random_state : int or RandomState\n        Pseudo-random number generator state used for random sampling.\n\n    stratify : str or None (default=None)\n        The name of the target on which to stratify the sampling\n\n    Returns\n    -------\n\n    out : tuple, shape=(2,)\n        training_frame : H2OFrame\n            The training fold split\n\n        testing_frame : H2OFrame\n            The testing fold split\n    \"\"\"\n    frame = check_frame(frame, copy=False)\n    if test_size is None and train_size is None:\n        test_size = 0.25\n\n    if stratify is not None:\n        CVClass = H2OStratifiedShuffleSplit\n    else:\n        CVClass = H2OShuffleSplit\n\n    cv = CVClass(n_splits=2,\n                 test_size=test_size,\n                 train_size=train_size,\n                 random_state=random_state)\n\n    # for the h2o one, we only need iter 0\n    tr_te_tuples = [(tr, te) for tr, te in cv.split(frame, stratify)][0]\n\n    # h2o \"doesn't reorder rows\" so we need to keep these sorted...\n    train, test = sorted(list(tr_te_tuples[0])), sorted(list(tr_te_tuples[1]))\n    out = (\n        frame[train, :],\n        frame[test, :]\n    )\n\n    return out", "id": 12, "concepts": ["random sampling", "data partitioning", "conditional branching"], "instruction": "Write a Python function that takes a list of integers and returns a random sample of `k` elements from the list. The function should use random sampling with replacement to ensure that each element may be selected multiple times."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 3\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iteration over dictionaries with keys and values, list comprehension, dictionary iteration\n\n### Task", "fingerprint": null, "seed": "def _key_vals(dict_):\n    \"\"\"Return a list of key-val tuples.\"\"\"\n    return [(key, val) for key, val in dict_.iteritems()]", "id": 14, "concepts": ["iteration over dictionaries with keys and values", "list comprehension", "dictionary iteration"], "instruction": "Write a Python function that takes a dictionary as an input and prints out all pairs of keys and values, separated by a colon. Use the `str.format()` method to format each key-value pair properly."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: handling missing values with NaN, string manipulation, data manipulation with pandas\n\n### Task", "fingerprint": null, "seed": "def clean_data(dataframe):\n    \"\"\"\n        Cleaning the merged dataframe to make it ready to analyze\n    \"\"\"\n    # split categories into seperate\n    categories = dataframe.categories.str.split(';', expand=True)\n    \n    # select the first row&col of the categories dataframe\n    row&col = categories.iloc[0]\n    cate_col = row&col.apply(lambda x: x[:-2])\n    cate.columns = cate_colnames\n    \n    #convert categories values to numeric instead of strings\n    for column in categories:\n        categories[column] = categories[column].str[-1]\n        categories[column] = categories[column].astype(int)\n    \n    # replace categories column in dataframe \n    dataframe.drop(columns = ['categories'], inplace=True)\n    # concatenate the original dataframe with the new `categories` dataframe\n    dataframe = dataframe.join(categories)\n    \n    #drop duplicates\n    dataframe.drop_duplicates(inplace=True)\n    \n    return dataframe", "id": 15, "concepts": ["handling missing values with NaN", "string manipulation", "data manipulation with pandas"], "instruction": "Write a Python program to implement a simple linear regression model from scratch. The program should include a training and a testing process. The training process should prompt the user for training data, train the model using linear regression, and then print the weights and bias. The testing process should prompt the user for testing data and then predict the output using the trained model. If the program encounters missing values in the testing data, it should use the `NaN` value as the default prediction value.\n\nUse the NumPy library for vectorized operations and the pandas library for data manipulation."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: nested functions, data calculation, conditional branching, integer division\n\n### Task", "fingerprint": null, "seed": "def _return_heuristic(bot, problem):\n    \"\"\"Return the return heuristic.\n\n    bot is an _ImaginaryBot.\n    \"\"\"\n    bot_pos = bot.get_pos()\n    player_pos = problem.get_player_loc()\n    bot_plane_pos = (bot.x, bot.z)\n\n    y_diff = bot_pos.y - player_pos.y\n\n    drop = _DROP if y_diff > 0 else 1\n    y_diff = abs(y_diff)\n    drops = _drops(y_diff, drop)\n    min_man = float('inf')\n    for dir_ in _adj_dirs():\n        loc = player_pos + 2 * dir_\n        man_dist = _manhattan(bot_plane_pos, (loc.x, loc.z))\n        if man_dist < min_man:\n            min_man = man_dist\n        if man_dist < drops:\n            return drops\n    return min_man", "id": 16, "concepts": ["nested functions", "data calculation", "conditional branching", "integer division"], "instruction": "Write a Python program that satisfies the following specifications.\n\n- The program should first prompt the user to enter a positive integer as input.\n- The program should then check if the input is a valid positive integer. If not, it should display an informative error message and terminate the program.\n- If the input is valid, the program should calculate the sum of all the numbers from 1 to the input. It should also find the average of all the numbers.\n- Finally, the program should print out the result, including the total sum and average."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: conditional branching, list-based iteration, list nesting, list initialization\n\n### Task", "fingerprint": null, "seed": "def get_new_values(values):\n    \"\"\"Record any changes higher. Its size is the same as its argument's.\"\"\"\n    new_values = []\n    new_value = values[0]\n    for value in values:\n        if value > new_value:\n            new_value = value\n        new_values.append(new_value)\n    return new_values", "id": 17, "concepts": ["conditional branching", "list-based iteration", "list nesting", "list initialization"], "instruction": "Write a Python class `NestedList` that represents a nested list of integers. The class should support the following operations:\n- `length`: returns the total number of integers in all the nested lists\n- `get_item(n)`: returns the value of the ith integer in the list (starting from 0)\n- `get_sublist(n)`: returns the n sublist of the list\n\nThe nested list will always have 1 or more levels, and will be formed like this:\n\n```\n[[1, 2], [3, 4], [5, 6], 7, 8, [9, 10]]\n\n```\n\nThe `length` method should return 10, and the `get_item(0)` method should return 1."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: conditional statement, list comprehension, recursive function definition, list traversal\n\n### Task", "fingerprint": null, "seed": "def _adj_dirs():\n    \"\"\"Return the adjacent directions.\"\"\"\n    return [_Vec3(1, 0, 0), _Vec3(-1, 0, 0), _Vec3(0, 0, 1), _Vec3(0, 0, -1)]", "id": 18, "concepts": ["conditional statement", "list comprehension", "recursive function definition", "list traversal"], "instruction": "Write a Python function that satisfies the following specifications.\n\nThe function should take a list of numbers and an integer `k` as input, and return a list of all possible groups of `k` numbers that can be created from this list such that the sum of the group elements is equal to the integer `k`.\n\nIf there are no groups that can be generated for the given list of numbers and the given integer `k`, the function should return an empty list.\n\nUse the following assertions to test your function:\n\n```python\nassert create_sum_groups([1, 2, 3, 4, 5, 6, 7, 8], 9) == [[1, 2, 6], [1, 3, 5], [2, 3, 4]]\nassert create_sum_groups([1, 2, 5, 4], 10) == [[1, 9]]\nassert create_sum_groups([1, 2, 3, 4, 5, 6, 7, 8], 15) == []\nassert create_sum_groups([1, 2, 3, 4, 5, 6, 7, 8], 10) == [[1, 1, 1, 1, 1, 1, 1, 1]]\n```"}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: recursive function implementation, linked list node definition, linked list composition, conditional branching\n\n### Task", "fingerprint": null, "seed": "def filter_pos_rec(lst):\n    \"\"\"\n    @type lst: LinkedListRec\n    >>> lst = LinkedListRec([3, -10, 4, 0])\n    >>> pos = filter_pos_rec(lst)\n    >>> str(pos)\n    '3 -> 4'\n\n    \"\"\"\n    if lst.is_empty():\n        return lst\n    else:\n        pos_rec = LinkedListRec([])\n        if lst._first > 0:\n            pos_rec._first = lst._first\n            pos_rec._rest = filter_pos_rec(lst._rest)\n        else:\n            pos_rec = filter_pos_rec(lst._rest)\n        return pos_rec", "id": 19, "concepts": ["recursive function implementation", "linked list node definition", "linked list composition", "conditional branching"], "instruction": "Implement a Python class `LinkedList` with a method `partition(x)` that takes an input `x` and returns a partitioned linked list. The method should divide the linked list into two distinct linked lists, where elements with values below `x` should be in the first list and those with values above `x` should be in the second list.\n\nFor instance, given a linked list of `[3, 5, 8, 5, 10, 2, 1]`, the method should return a linked list of `[3, 2, 1]` and `[8, 10]` after partitioning.\n\nSolve the problem using a recursive function."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: function composition, iterable unpacking, iterable function argument, function argument unpacking\n\n### Task", "fingerprint": null, "seed": "def _manhattan(pos1, pos2):\n    \"\"\"Return the manhattan distance. pos1 and pos2 should be iterable.\"\"\"\n    return sum(abs(val1 - val2) for val1, val2 in zip(pos1, pos2))", "id": 20, "concepts": ["function composition", "iterable unpacking", "iterable function argument", "function argument unpacking"], "instruction": "Create a Python function `compose` that takes in two functions and returns a new function that, given some data, first applies the first function, then the second. For example:\n\n```python\ndef square(x):\n    return x * x\n\ndef add(x, y):\n    return x + y\n\nadd_squared = compose(square, add)\n\nadd_squared(3, 4) == 25\n```"}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: loading data from csv files, merging dataframes, handling dataframes\n\n### Task", "fingerprint": null, "seed": "def load_data(messages_filepath, categories_filepath):\n    \"\"\"\n    This function loads the message and categories files and\n    merge them and return the new dataframe for the project\n    \"\"\"\n    # Read messages and categories data\n    messaging = pd.read_csv(messages_filepath)\n    categories = pd.read_csv(categories_filepath)\n\n    # Merge the two dataframes\n    dataframe = messaging.merge(categories, how='inner', on= 'id')\n    return dataframe", "id": 22, "concepts": ["loading data from csv files", "merging dataframes", "handling dataframes"], "instruction": "Write a Python program to load two CSV files and merge them into one data frame. The program should handle cases where the number of columns and their respective names are different in both files."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: morphology package for part-of-speech tagging, suffix mapping for numbering, regular expression for pattern matching\n\n### Task", "fingerprint": null, "seed": "def nums(phrase, morph=pymorphy2.MorphAnalyzer()):\n    \"\"\" \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441 \u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438, \u0441\u0442\u043e\u044f\u0449\u0438\u043c\u0438 \u043f\u0435\u0440\u0435\u0434 \u043d\u0438\u043c\u0438 \"\"\"\n    phrase = phrase.replace('  ', ' ').replace(',', ' ,')\n    numeral = ''\n    new_phrase = []\n    for word in phrase.split(' '):\n        if 'NUMB' in morph.parse(word)[0].tag:\n            numeral = word\n        if numeral:\n            word = str(morph.parse(word)[0].make_agree_with_number(abs(int(numeral))).word)\n        new_phrase.append(word)\n\n    return ' '.join(new_phrase).replace(' ,', ',')", "id": 23, "concepts": ["morphology package for part-of-speech tagging", "suffix mapping for numbering", "regular expression for pattern matching"], "instruction": "Create a Python class `SuffixNumberer` that implements suffix numbering logic for numbers. The class encapsulates a morphology analyzer to identify the words in the input number using part-of-speech tagging. The class also implements a mapping from suffixes to the corresponding numbering sequences. The class should be instantiated with a list of suffixes and their corresponding numbering sequences.\n\nThe numbering logic for each number should be determined by analyzing the morphology of the input number using the `morphology` package. The numbering sequence should be computed using suffix mapping and regular expression pattern matching. The class should support applying various numbering strategies such as \"cardinal\", \"ordinal\", or \"ordinal long\" to generate the corresponding number.\n\nFinally, the class should be able to handle erroneous inputs, such as invalid numbers or non-supported numbering strategies."}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for integer division, conditional flow control, variable scoping\n\n### Task", "fingerprint": null, "seed": "def _drops(dist, drop):\n    \"\"\"Return the number of times it takes to drop a distance dist. drop is the\n    length of one drop. Both are assumed positive.\"\"\"\n    rtn = dist / drop\n    if dist % drop != 0:\n        rtn += 1\n    return rtn", "id": 24, "concepts": ["arithmetic operations for integer division", "conditional flow control", "variable scoping"], "instruction": "Create a Python program to count the number of prime numbers between 1 and a given number, n. The program should use the Sieve of Eratosthenes algorithm to find the primes."}
